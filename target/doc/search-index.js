var searchIndex = new Map(JSON.parse('[["compiler",{"t":"CCHCCPPPPPPPPGPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPGGPGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPGPPPNNNNNNNNONNNNNNNONNONNNNONNNNNNNNNFNNNONNNNNONNNNNNNNNNNNNNNNNNNNNNOOPFPPGFONNNNNNNNNNNNONNNNNNNONNNNNNOONOONONNNNNNNNNNNO","n":["ast","lexer","main","parser","vm","Add","AddressOf","And","Array","ArrayIndex","ArrayLiteral","Assign","","BinOp","BinaryOp","BitAnd","BitOr","BitXor","Block","Boolean","Cast","Char","","Deref","Div","EnumValue","Equal","Expr","ExprStmt","Function","FunctionCall","GreaterEqual","GreaterThan","If","Int","","LessEqual","LessThan","Let","Mod","Mul","Not","NotEqual","Number","Or","Pointer","PostDec","PostInc","PreDec","PreInc","Print","Return","Shl","Shr","SizeOf","Stmt","Str","StringLiteral","Sub","Ternary","Type","UnOp","UnaryOp","Value","Variable","Void","While","borrow","","","","","","borrow_mut","","","","","","clone","","","","","","clone_into","","","","","","clone_to_uninit","","","","","","eq","","fmt","","","","","","from","","","","","","into","","","","","","to_owned","","","","","","try_from","","","","","","try_into","","","","","","type_id","","","","","","args","condition","else_branch","expr","left","name","op","","right","then_branch","body","","condition","","else_branch","name","","","params","return_type","then_branch","value","","var_type","Add","AddressOf","And","Assign","BitAnd","BitNot","BitOr","BitXor","Char","CloseBrace","CloseBracket","CloseParen","Colon","Comma","Deref","Div","Else","Enum","Eof","Equal","False","Fn","GreaterEqual","GreaterThan","Identifier","If","LessEqual","LessThan","Let","Lexer","MinusMinus","Mod","Mul","Not","NotEqual","Num","OpenBrace","OpenBracket","OpenParen","Or","PlusPlus","Print","QuestionMark","Return","Semicolon","Shl","Shr","Sizeof","StringLiteral","Sub","Token","True","Unknown","While","advance","borrow","","borrow_mut","","clone","clone_into","clone_to_uninit","col","current_char","eq","fmt","from","","get_position","identifier_or_keyword","input","into","","line","match_char","new","next_token","number","pos","skip_whitespace","skip_whitespace_and_comments","to_owned","try_from","","try_into","","type_id","","Parser","block","borrow","borrow_mut","current_token","expect_identifier","expect_token","expression","from","into","lexer","new","next","parse","parse_add_sub","parse_assignment","parse_bit_and","parse_bit_or","parse_bit_xor","parse_cmp","parse_logic_and","parse_logic_or","parse_mul_div","parse_postfix","parse_primary","parse_shift","parse_ternary","parse_type","parse_unary","statement","try_from","try_into","type_id","type_map","vm","Array","Function","Int","Str","Value","Vm","body","borrow","","","borrow_mut","","","clone","","clone_into","","clone_to_uninit","","constants","eval_as_bool","eval_expr","execute","fmt","from","","","functions","get_result","get_result_str","handle_assign","into","","","last_result","name","new","params","return_type","set_result","should_return","to_owned","","try_from","","","try_into","","","type_id","","","variables"],"q":[[0,"compiler"],[5,"compiler::ast"],[141,"compiler::ast::Expr"],[151,"compiler::ast::Stmt"],[165,"compiler::lexer"],[253,"compiler::parser"],[288,"compiler::vm"],[341,"core::fmt"],[342,"core::result"],[343,"core::any"],[344,"core::option"],[345,"alloc::string"],[346,"alloc::vec"]],"i":"`````jh1A`112Ab`2333022212323`002330n244144l5453444422554`1454``4`43245013245013245013245013245013253450132450132450132450132450132450132450132ClCn0D`Db30102DdDfDh20DjDl3332101Bb0000000000000000000000000000`00000000000000000000`000B`010111100110100001000000001010101`Bn000000000000000000000000000000000Ch`00``CfCb120121212120000201200000120101100120120120120","f":"``{{}b}````````````````````````````````````````````````````````````````{d{{d{c}}}{}}00000{{{d{f}}}{{d{fc}}}{}}00000{{{d{h}}}h}{{{d{j}}}j}{{{d{l}}}l}{{{d{n}}}n}{{{d{A`}}}A`}{{{d{Ab}}}Ab}{{d{d{fc}}}b{}}00000{{dAd}b}00000{{{d{j}}{d{j}}}Af}{{{d{A`}}{d{A`}}}Af}{{{d{h}}{d{fAh}}}Aj}{{{d{j}}{d{fAh}}}Aj}{{{d{l}}{d{fAh}}}Aj}{{{d{n}}{d{fAh}}}Aj}{{{d{A`}}{d{fAh}}}Aj}{{{d{Ab}}{d{fAh}}}Aj}{cc{}}00000{{}c{}}00000{dc{}}00000{c{{Al{e}}}{}{}}00000{{}{{Al{c}}}{}}00000{dAn}00000``````````````````````````````````````````````````````````````````````````````{{{d{fB`}}}b}{d{{d{c}}}{}}0{{{d{f}}}{{d{fc}}}{}}0{{{d{Bb}}}Bb}{{d{d{fc}}}b{}}{{dAd}b}`{{{d{B`}}}{{Bf{Bd}}}}{{{d{Bb}}{d{Bb}}}Af}{{{d{Bb}}{d{fAh}}}Aj}>>{{{d{B`}}}{{Bj{BhBh}}}}{{{d{fB`}}}Bb}`??`{{{d{B`}}Bd}Af}{{{d{Bl}}}B`}22`<<{dc{}}{c{{Al{e}}}{}{}}0{{}{{Al{c}}}{}}0{dAn}0`{{{d{fBn}}}Ab}{d{{d{c}}}{}}{{{d{f}}}{{d{fc}}}{}}`{{{d{fBn}}{d{Bl}}BhBh}C`}{{{d{fBn}}Bb{d{Bl}}BhBh}b}{{{d{fBn}}}h}{cc{}}{{}c{}}`{{B`{d{fCb}}}Bn}{{{d{fBn}}}b}{{{d{fBn}}}{{Cd{Ab}}}}555555555{{{d{fBn}}h}h}666{{{d{fBn}}}{{Bf{A`}}}}7<?>=`````````;;;:::{{{d{Cf}}}Cf}{{{d{Ch}}}Ch}{{d{d{fc}}}b{}}0{{dAd}b}0`{{{d{fCb}}h}Af}{{{d{fCb}}h}Ch}{{{d{fCb}}Ab}b}{{{d{Ch}}{d{fAh}}}Aj}>>>`{{{d{Cb}}}Cj}{{{d{Cb}}}{{Bf{{d{Bl}}}}}}{{{d{fCb}}hh}Ch}{{}c{}}00``{{}Cb}``{{{d{fCb}}Ch}b}`{dc{}}0{c{{Al{e}}}{}{}}00{{}{{Al{c}}}{}}00{dAn}00`","D":"AA`","p":[[1,"unit"],[1,"reference",null,null,1],[0,"mut"],[6,"Expr",5],[6,"BinOp",5],[6,"UnOp",5],[6,"Value",5],[6,"Type",5],[6,"Stmt",5],[1,"u8"],[1,"bool"],[5,"Formatter",341],[8,"Result",341],[6,"Result",342,null,1],[5,"TypeId",343],[5,"Lexer",165],[6,"Token",165],[1,"char"],[6,"Option",344,null,1],[1,"usize"],[1,"tuple",null,null,1],[1,"str"],[5,"Parser",253],[5,"String",345],[5,"Vm",288],[5,"Vec",346],[5,"Function",288],[6,"Value",288],[1,"i32"],[15,"FunctionCall",141],[15,"Ternary",141],[15,"UnaryOp",141],[15,"BinaryOp",141],[15,"While",151],[15,"Function",151],[15,"If",151],[15,"Let",151],[15,"Assign",151]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAM0AEQAAAAAAAgADAEQAJQB2AEwAxAATANkADgDqAAIA7wABAPMACgAAAQIABQEAAAgBAAAYAQAAHAEEACgBCwA4AQAASgEKAA==","P":[[67,"T"],[79,""],[85,"T"],[91,""],[105,"T"],[111,"U"],[117,"T"],[123,"U,T"],[129,"U"],[135,""],[220,"T"],[224,""],[225,"T"],[226,""],[231,"T"],[233,""],[236,"U"],[239,""],[246,"T"],[247,"U,T"],[249,"U"],[251,""],[255,"T"],[258,""],[261,"T"],[262,"U"],[264,""],[283,"U,T"],[284,"U"],[285,""],[295,"T"],[301,""],[303,"T"],[305,""],[312,"T"],[316,""],[319,"U"],[324,""],[329,"T"],[331,"U,T"],[334,"U"],[337,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[6302]}