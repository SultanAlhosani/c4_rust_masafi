use crate::ast::{Expr, Stmt};
use crate::lexer::{Lexer, Token};
use crate::vm::Vm;

/// The `Parser` is responsible for converting a stream of tokens into an
/// abstract syntax tree (AST).
///
/// It processes the tokens generated by the lexer and organizes them into
/// meaningful structures like expressions and statements.
pub struct Parser<'a> {
    lexer: Lexer,
    current_token: Token,
    vm: &'a mut Vm,
}

impl<'a> Parser<'a> {
    /// Creates a new `Parser` instance.
    ///
    /// # Parameters
    /// - `lexer`: The `Lexer` instance providing the tokens.
    /// - `vm`: A mutable reference to the virtual machine (VM) for function handling.
    ///
    /// # Returns
    /// A new `Parser` instance.
    pub fn new(lexer: Lexer, vm: &'a mut Vm) -> Self {
        let mut parser = Self {
            lexer,
            current_token: Token::Eof, // Placeholder
            vm,
        };
        parser.next(); // Load the first token
        parser
    }

    /// Advances to the next token in the input.
    pub fn next(&mut self) {
        self.current_token = self.lexer.next_token();
    }

    /// Parses the entire input into a list of statements.
    ///
    /// # Returns
    /// A vector of `Stmt` representing the parsed statements.
    pub fn parse(&mut self) -> Vec<Stmt> {
        let mut statements = Vec::new();
        while self.current_token != Token::Eof {
            statements.push(self.statement());
        }
        statements
    }

    /// Parses a single statement from the input.
    ///
    /// # Returns
    /// A `Stmt` representing the parsed statement.
    fn statement(&mut self) -> Stmt {
        match &self.current_token {
            Token::Return => {
                self.next();
                let expr = self.expression();
                if self.current_token == Token::Semicolon {
                    self.next();
                }
                Stmt::Return(expr)
            }
            Token::Let => {
                self.next();
                let name = match &self.current_token {
                    Token::Identifier(n) => {
                        let n = n.clone();
                        self.next();
                        n
                    }
                    _ => panic!("Expected identifier after 'let'"),
                };
                if self.current_token != Token::Assign {
                    panic!("Expected '=' after identifier");
                }
                self.next();
                let value = self.expression();
                if self.current_token == Token::Semicolon {
                    self.next();
                }
                Stmt::Let { name, value }
            }
            Token::Identifier(name) => {
                let var_name = name.clone();
                self.next();
                if self.current_token != Token::Assign {
                    panic!("Expected '=' after identifier");
                }
                self.next();
                let value = self.expression();
                if self.current_token == Token::Semicolon {
                    self.next();
                }
                Stmt::Assign {
                    name: var_name,
                    value,
                }
            }
            Token::If => {
                self.next();
                if self.current_token != Token::OpenParen {
                    panic!("Expected '(' after 'if'");
                }
                self.next();
                let condition = self.expression();
                if self.current_token != Token::CloseParen {
                    panic!("Expected ')' after condition");
                }
                self.next();
                let then_branch = Box::new(self.statement());
                let else_branch = if self.current_token == Token::Else {
                    self.next();
                    Some(Box::new(self.statement()))
                } else {
                    None
                };
                Stmt::If {
                    condition,
                    then_branch,
                    else_branch,
                }
            }
            Token::While => {
                self.next();
                if self.current_token != Token::OpenParen {
                    panic!("Expected '(' after 'while'");
                }
                self.next();
                let condition = self.expression();
                if self.current_token != Token::CloseParen {
                    panic!("Expected ')' after condition");
                }
                self.next();
                let body = Box::new(self.statement());
                Stmt::While { condition, body }
            }
            Token::OpenBrace => self.block(),
            Token::Fn => {
                self.next(); // Consume 'fn'

                // Expect an identifier (function name)
                let name = match &self.current_token {
                    Token::Identifier(n) => {
                        let n = n.clone();
                        self.next();
                        n
                    }
                    _ => panic!("Expected function name after 'fn'"),
                };

                // Parse parameters
                if self.current_token != Token::OpenParen {
                    panic!("Expected '(' after function name");
                }
                self.next(); // Consume '('

                let mut params = Vec::new();
                while self.current_token != Token::CloseParen {
                    if let Token::Identifier(param) = &self.current_token {
                        params.push(param.clone());
                        self.next();

                        if self.current_token == Token::Comma {
                            self.next(); // Consume ','
                        } else if self.current_token != Token::CloseParen {
                            panic!("Expected ',' or ')' in parameter list");
                        }
                    } else {
                        panic!("Expected parameter name");
                    }
                }
                self.next(); // Consume ')'

                // Parse function body (block)
                let body = Box::new(self.block());

                Stmt::Function { name, params, body }
            }
            _ => panic!(
                "Unexpected token: {:?}. Ensure the input is valid.",
                self.current_token
            ),
        }
    }

    /// Parses an expression from the input.
    ///
    /// # Returns
    /// An `Expr` representing the parsed expression.
    fn expression(&mut self) -> Expr {
        let mut node = self.primary();

        loop {
            match self.current_token {
                Token::Add => {
                    self.next();
                    node = Expr::BinaryOp {
                        op: crate::ast::BinOp::Add,
                        left: Box::new(node),
                        right: Box::new(self.primary()),
                    };
                }
                Token::Sub => {
                    self.next();
                    node = Expr::BinaryOp {
                        op: crate::ast::BinOp::Sub,
                        left: Box::new(node),
                        right: Box::new(self.primary()),
                    };
                }
                Token::Mul => {
                    self.next();
                    node = Expr::BinaryOp {
                        op: crate::ast::BinOp::Mul,
                        left: Box::new(node),
                        right: Box::new(self.primary()),
                    };
                }
                Token::Div => {
                    self.next();
                    node = Expr::BinaryOp {
                        op: crate::ast::BinOp::Div,
                        left: Box::new(node),
                        right: Box::new(self.primary()),
                    };
                }
                Token::Equal => {
                    self.next();
                    node = Expr::BinaryOp {
                        op: crate::ast::BinOp::Equal,
                        left: Box::new(node),
                        right: Box::new(self.primary()),
                    };
                }
                Token::NotEqual => {
                    self.next();
                    node = Expr::BinaryOp {
                        op: crate::ast::BinOp::NotEqual,
                        left: Box::new(node),
                        right: Box::new(self.primary()),
                    };
                }
                Token::LessThan => {
                    self.next();
                    node = Expr::BinaryOp {
                        op: crate::ast::BinOp::LessThan,
                        left: Box::new(node),
                        right: Box::new(self.primary()),
                    };
                }
                Token::GreaterThan => {
                    self.next();
                    node = Expr::BinaryOp {
                        op: crate::ast::BinOp::GreaterThan,
                        left: Box::new(node),
                        right: Box::new(self.primary()),
                    };
                }
                _ => break,
            }
        }

        node
    }

    /// Parses a primary expression (e.g., literals, variables, or grouped expressions).
    ///
    /// # Returns
    /// An `Expr` representing the parsed primary expression.
    fn primary(&mut self) -> Expr {
        match &self.current_token {
            Token::Num(n) => {
                let val = *n;
                self.next();
                Expr::Number(val)
            }
            Token::True => {
                self.next();
                Expr::Boolean(true)
            }
            Token::False => {
                self.next();
                Expr::Boolean(false)
            }
            Token::Char(c) => {
                // <-- Added here
                let ch = *c;
                self.next();
                Expr::Char(ch)
            }
            Token::Identifier(name) => {
                let var_name = name.clone();
                self.next();

                // Check if this is a function call
                if self.current_token == Token::OpenParen {
                    self.next(); // consume '('
                    let mut args = Vec::new();

                    while self.current_token != Token::CloseParen {
                        let arg = self.expression();
                        args.push(arg);

                        if self.current_token == Token::Comma {
                            self.next(); // consume ','
                        } else if self.current_token != Token::CloseParen {
                            panic!("Expected ',' or ')' in function call");
                        }
                    }
                    self.next(); // consume ')'

                    Expr::FunctionCall {
                        name: var_name,
                        args,
                    }
                } else {
                    Expr::Variable(var_name)
                }
            }
            Token::OpenParen => {
                self.next();
                let expr = self.expression();
                if self.current_token != Token::CloseParen {
                    panic!("Expected ')' after expression");
                }
                self.next();
                expr
            }
            _ => {
                panic!(
                    "Unexpected token in primary expression: {:?}",
                    self.current_token
                );
            }
        }
    }

    /// Parses a block of statements enclosed in braces `{}`.
    ///
    /// # Returns
    /// A `Stmt::Block` containing the parsed statements.
    fn block(&mut self) -> Stmt {
        if self.current_token != Token::OpenBrace {
            return self.statement();
        }

        self.next();
        let mut statements = Vec::new();

        while self.current_token != Token::CloseBrace {
            statements.push(self.statement());
        }

        self.next();

        Stmt::Block(statements)
    }
}
